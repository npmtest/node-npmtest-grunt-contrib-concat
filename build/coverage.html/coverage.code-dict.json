{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/lib.npmtest_grunt_contrib_concat.js":"/* istanbul instrument in package npmtest_grunt_contrib_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_concat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_concat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-concat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_concat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_concat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_concat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_concat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_concat.__dirname + '/lib.npmtest_grunt_contrib_concat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/node_modules/grunt-contrib-concat/tasks/concat.js":"/*\n * grunt-contrib-concat\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Internal lib.\n  var comment = require('./lib/comment').init(grunt);\n  var chalk = require('chalk');\n  var sourcemap = require('./lib/sourcemap').init(grunt);\n\n  grunt.registerMultiTask('concat', 'Concatenate files.', function() {\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      separator: grunt.util.linefeed,\n      banner: '',\n      footer: '',\n      stripBanners: false,\n      process: false,\n      sourceMap: false,\n      sourceMapName: undefined,\n      sourceMapStyle: 'embed'\n    });\n\n    // Normalize boolean options that accept options objects.\n    if (options.stripBanners === true) {\n      options.stripBanners = {};\n    }\n    if (options.process === true) {\n      options.process = {};\n    }\n\n    // Process banner and footer.\n    var banner = grunt.template.process(options.banner);\n    var footer = grunt.template.process(options.footer);\n\n    // Set a local variable for whether to build source maps or not.\n    var sourceMap = options.sourceMap;\n\n    // If content is not embedded and it will be modified, either exit or do\n    // not make the source map.\n    if (\n      sourceMap && options.sourceMapStyle === 'link' &&\n        (options.stripBanners || options.process)\n    ) {\n      // Warn and exit if --force isn't set.\n      grunt.warn(\n        'stripBanners or process option is enabled. ' +\n        'Set sourceMapStyle option to \\'embed\\' or \\'inline\\'.'\n      );\n      // --force is set, continue on without the source map.\n      grunt.log.warn('Skipping creation of source maps.');\n      // Set sourceMap to false to keep maps from being constructed.\n      sourceMap = false;\n    }\n\n    // Iterate over all src-dest file pairs.\n    this.files.forEach(function(f) {\n      // Initialize source map objects.\n      var sourceMapHelper;\n      if (sourceMap) {\n        sourceMapHelper = sourcemap.helper(f, options);\n        sourceMapHelper.add(banner);\n      }\n\n      // Concat banner + specified files + footer.\n      var src = banner + f.src.filter(function(filepath) {\n        // Warn on and remove invalid source files (if nonull was set).\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.warn('Source file \"' + filepath + '\" not found.');\n          return false;\n        }\n        return true;\n      }).map(function(filepath, i) {\n        if (grunt.file.isDir(filepath)) {\n          return;\n        }\n        // Read file source.\n        var src = grunt.file.read(filepath);\n        // Process files as templates if requested.\n        if (typeof options.process === 'function') {\n          src = options.process(src, filepath);\n        } else if (options.process) {\n          src = grunt.template.process(src, options.process);\n        }\n        // Strip banners if requested.\n        if (options.stripBanners) {\n          src = comment.stripBanner(src, options.stripBanners);\n        }\n        // Add the lines of this file to our map.\n        if (sourceMapHelper) {\n          src = sourceMapHelper.addlines(src, filepath);\n          if (i < f.src.length - 1) {\n            sourceMapHelper.add(options.separator);\n          }\n        }\n        return src;\n      }).join(options.separator) + footer;\n\n      if (sourceMapHelper) {\n        sourceMapHelper.add(footer);\n        sourceMapHelper.write();\n        // Add sourceMappingURL to the end.\n        src += sourceMapHelper.url();\n      }\n\n      // Write the destination file.\n      grunt.file.write(f.dest, src);\n\n      // Print a success message.\n      grunt.verbose.write('File ' + chalk.cyan(f.dest) + ' created.');\n    });\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/node_modules/grunt-contrib-concat/tasks/lib/comment.js":"/*\n * grunt-contrib-concat\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nexports.init = function(/*grunt*/) {\n  var exports = {};\n\n  // Return the given source code with any leading banner comment stripped.\n  exports.stripBanner = function(src, options) {\n    if (!options) {\n      options = {};\n    }\n\n    var m = [];\n    if (options.line) {\n      // Strip // ... leading banners.\n      m.push('(?:.*\\\\/\\\\/.*\\\\r?\\\\n)+\\\\s*');\n    }\n    if (options.block) {\n      // Strips all /* ... */ block comment banners.\n      m.push('\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/');\n    } else {\n      // Strips only /* ... */ block comment banners, excluding /*! ... */.\n      m.push('\\\\/\\\\*[^!][\\\\s\\\\S]*?\\\\*\\\\/');\n    }\n    var re = new RegExp('^\\\\s*(?:' + m.join('|') + ')\\\\s*', '');\n    return src.replace(re, '');\n  };\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-concat/node_modules/grunt-contrib-concat/tasks/lib/sourcemap.js":"/*\n * grunt-contrib-concat\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nexports.init = function(grunt) {\n  var exports = {};\n\n  // Node first party libs\n  var path = require('path');\n\n  // Third party libs\n  var chalk = require('chalk');\n  var SourceMap = require('source-map');\n  var SourceMapConsumer = SourceMap.SourceMapConsumer;\n  var SourceMapGenerator = SourceMap.SourceMapGenerator;\n\n  var NO_OP = function(){};\n\n  function SourceMapConcatHelper(options) {\n    this.files = options.files;\n    this.dest = options.dest;\n    this.options = options.options;\n    this.line = 1;\n    this.column = 0;\n\n    // ensure we're using forward slashes, because these are URLs\n    var file = path.relative(path.dirname(this.dest), this.files.dest).replace(/\\\\/g, '/');\n    var generator = new SourceMapGenerator({\n      file: file\n    });\n    this.file = file;\n    this.generator = generator;\n    this.addMapping = function(genLine, genCol, orgLine, orgCol, source, name) {\n      if (!source) {\n        generator.addMapping({\n          generated: {line: genLine, column: genCol}\n        });\n      } else {\n        if (!name) {\n          generator.addMapping({\n            generated: {line: genLine, column: genCol},\n            original: {line: orgLine, column: orgCol},\n            source: source\n          });\n        } else {\n          generator.addMapping({\n            generated: {line: genLine, column: genCol},\n            original: {line: orgLine, column: orgCol},\n            source: source,\n            name: name\n          });\n        }\n      }\n    };\n  }\n\n  // Return an object that is used to track sourcemap data between calls.\n  exports.helper = function(files, options) {\n    // Figure out the source map destination.\n    var dest = files.dest;\n    if (options.sourceMapStyle === 'inline') {\n      // Leave dest as is. It will be used to compute relative sources.\n    } else if (typeof options.sourceMapName === 'string') {\n      dest = options.sourceMapName;\n    } else if (typeof options.sourceMapName === 'function') {\n      dest = options.sourceMapName(dest);\n    } else {\n      dest += '.map';\n    }\n\n    // Inline style and sourceMapName together doesn't work\n    if (options.sourceMapStyle === 'inline' && options.sourceMapName) {\n      grunt.log.warn(\n        'Source map will be inlined, sourceMapName option ignored.'\n      );\n    }\n\n    return new SourceMapConcatHelper({\n      files: files,\n      dest: dest,\n      options: options\n    });\n  };\n\n  // Parse only to increment the generated file's column and line count\n  SourceMapConcatHelper.prototype.add = function(src) {\n    this._forEachTokenPosition(src);\n  };\n\n  /**\n   * Parse the source file into tokens and apply the provided callback\n   * with the position of the token boundaries in the original file, and\n   * in the generated file.\n   *\n   * @param src The sources to tokenize. Required\n   * @param filename The name of the source file. Optional\n   * @param callback What to do with the token position indices. Optional\n   */\n  SourceMapConcatHelper.prototype._forEachTokenPosition = function(src, filename, callback) {\n    var genLine = this.line;\n    var genCol = this.column;\n    var orgLine = 1;\n    var orgCol = 0;\n    // Tokenize on words, new lines, and white space.\n    var tokens = src.split(/(\\n|[^\\S\\n]+|\\b)/g);\n    if (!callback) {\n      callback = NO_OP;\n    }\n    for (var i = 0, len = tokens.length; i < len; i++) {\n      var token = tokens[i];\n      if (token) {\n        // The if statement filters out empty strings.\n        callback(genLine, genCol, orgLine, orgCol, filename);\n        if (token === '\\n') {\n          ++orgLine;\n          ++genLine;\n          orgCol = 0;\n          genCol = 0;\n        } else {\n          orgCol += token.length;\n          genCol += token.length;\n        }\n      }\n    }\n\n    this.line = genLine;\n    this.column = genCol;\n  };\n\n  // Add the lines of a given file to the sourcemap. If in the file, store a\n  // prior sourcemap and return src with sourceMappingURL removed.\n  SourceMapConcatHelper.prototype.addlines = function(src, filename) {\n    var sourceMapRegEx = /\\n\\/[*/][@#]\\s+sourceMappingURL=((?:(?!\\s+\\*\\/).)*).*/;\n    var relativeFilename = path.relative(path.dirname(this.dest), filename);\n    // sourceMap path references are URLs, so ensure forward slashes are used for paths passed to sourcemap library\n    relativeFilename = relativeFilename.replace(/\\\\/g, '/');\n    if (sourceMapRegEx.test(src)) {\n      var sourceMapFile = RegExp.$1;\n      var sourceMapPath;\n\n      var sourceContent;\n      // Browserify, as an example, stores a datauri at sourceMappingURL.\n      if (/data:application\\/json;(charset:utf-8;)?base64,([^\\s]+)/.test(sourceMapFile)) {\n        // Set sourceMapPath to the file that the map is inlined.\n        sourceMapPath = filename;\n        sourceContent = new Buffer(RegExp.$2, 'base64').toString();\n      } else {\n        // If sourceMapPath is relative, expand relative to the file\n        // referring to it.\n        sourceMapPath = path.resolve(path.dirname(filename), sourceMapFile);\n        sourceContent = grunt.file.read(sourceMapPath);\n      }\n      var sourceMapDir = path.dirname(sourceMapPath);\n      var sourceMap = JSON.parse(sourceContent);\n      var sourceMapConsumer = new SourceMapConsumer(sourceMap);\n      // Consider the relative path from source files to new sourcemap.\n      var sourcePathToSourceMapPath = path.relative(path.dirname(this.dest), sourceMapDir);\n      // Transfer the existing mappings into this mapping\n      var initLine = this.line;\n      var initCol = this.column;\n      sourceMapConsumer.eachMapping(function(args){\n        var source;\n        if (args.source) {\n          source = path.join(sourcePathToSourceMapPath, args.source).replace(/\\\\/g, '/');\n        } else {\n          source = null;\n        }\n        this.line = initLine + args.generatedLine - 1;\n        if (this.line === initLine) {\n          this.column = initCol + args.generatedColumn;\n        } else {\n          this.column = args.generatedColumn;\n        }\n        this.addMapping(\n          this.line,\n          this.column,\n          args.originalLine,\n          args.originalColumn,\n          source,\n          args.name\n        );\n      }, this);\n      if (sourceMap.sources && sourceMap.sources.length && sourceMap.sourcesContent) {\n        for (var i = 0; i < sourceMap.sources.length; ++i) {\n          this.generator.setSourceContent(\n            path.join(sourcePathToSourceMapPath, sourceMap.sources[i]).replace(/\\\\/g, '/'),\n            sourceMap.sourcesContent[i]\n          );\n        }\n      }\n      // Remove the old sourceMappingURL.\n      src = src.replace(sourceMapRegEx, '');\n    } else {\n      // Otherwise perform a rudimentary tokenization of the source.\n      this._forEachTokenPosition(src, relativeFilename, this.addMapping);\n    }\n\n    if (this.options.sourceMapStyle !== 'link') {\n      this.generator.setSourceContent(relativeFilename, src);\n    }\n\n    return src;\n  };\n\n  // Return the comment sourceMappingURL that must be appended to the\n  // concatenated file.\n  SourceMapConcatHelper.prototype.url = function() {\n    // Create the map filepath. Either datauri or destination path.\n    var mapfilepath;\n    if (this.options.sourceMapStyle === 'inline') {\n      var inlineMap = new Buffer(this._write()).toString('base64');\n      mapfilepath = 'data:application/json;base64,' + inlineMap;\n    } else {\n      // Compute relative path to source map destination.\n      mapfilepath = path.relative(path.dirname(this.files.dest), this.dest);\n    }\n    // Create the sourceMappingURL.\n    var url;\n    if (/\\.css$/.test(this.files.dest)) {\n      url = '\\n/*# sourceMappingURL=' + mapfilepath + ' */';\n    } else {\n      url = '\\n//# sourceMappingURL=' + mapfilepath;\n    }\n\n    return url;\n  };\n\n  // Return a string for inline use or write the source map to disk.\n  SourceMapConcatHelper.prototype._write = function() {\n    // New sourcemap.\n    var newSourceMap = this.generator.toJSON();\n    // Return a string for inline use or write the map.\n    if (this.options.sourceMapStyle === 'inline') {\n      grunt.verbose.writeln(\n        'Source map for ' + chalk.cyan(this.files.dest) + ' inlined.'\n      );\n      return JSON.stringify(newSourceMap, null, '');\n    }\n    grunt.file.write(\n      this.dest,\n      JSON.stringify(newSourceMap, null, '')\n    );\n    grunt.verbose.writeln('Source map ' + chalk.cyan(this.dest) + ' created.');\n\n  };\n\n  // Non-private function to write the sourcemap. Shortcuts if writing a inline\n  // style map.\n  SourceMapConcatHelper.prototype.write = function() {\n    if (this.options.sourceMapStyle !== 'inline') {\n      this._write();\n    }\n  };\n\n  return exports;\n};\n"}